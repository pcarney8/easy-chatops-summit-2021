name: Deploy to OpenShift 

on:
  repository_dispatch:
    types: [deploy-command]

jobs:
  deploy-to-openshift:
    name: deploy to OpenShift
    runs-on: ubuntu-latest

    steps:
    - name: Get Environment Info
      id: env_info
      run: |
        ISSUE_TITLE=$(jq -r .client_payload.github.payload.issue.title $GITHUB_EVENT_PATH)
        echo ::set-output name=release::$(git ls-remote --heads https://github.com/$GITHUB_REPOSITORY $ISSUE_TITLE)
        echo ::set-output name=issuenm::$(jq .client_payload.github.payload.issue.number $GITHUB_EVENT_PATH)
        echo ::set-output name=issuetitle::$ISSUE_TITLE
        echo ::set-output name=comment_url::$(jq .client_payload.github.payload.comment.html_url $GITHUB_EVENT_PATH)
        echo ::set-output name=labels::$(jq .client_payload.github.payload.issue.labels $GITHUB_EVENT_PATH)

    - name: Set New Env / Namespace (CI)
      if: ${{ contains(steps.env_info.outputs.labels, 'promoted to demo') }}
      run: |
        echo "NEW_ENV=demo" >> $GITHUB_ENV
    - name: Set New Env / Namespace (Pro)
      if: ${{ contains(steps.env_info.outputs.labels, 'promoted to pro') }}
      run: |
        echo "NEW_ENV=pro" >> $GITHUB_ENV
    - name: Set New Env / Namespace (User Input)
      if: ${{ github.event.client_payload.slash_command.namespace != null }}
      run: |
        echo "NEW_ENV=${{ github.event.client_payload.slash_command.namespace }}" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.env_info.outputs.issuetitle }}-branch

    - name: Authenticate and set context for Non-Prod cluster
      if: ${{ github.event.client_payload.slash_command.cluster == 'ci' }}
      uses: redhat-actions/oc-login@v1
      env:
        OPENSHIFT_USERNAME: opentlc-mgr
        OPENSHIFT_NAMESPACE: argo-cd 
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        openshift_username: ${{ env.OPENSHIFT_USERNAME }}

    - name: Authenticate and set context for Production cluster
      if: ${{ github.event.client_payload.slash_command.cluster == 'prod' }}
      uses: redhat-actions/oc-login@v1
      env:
        OPENSHIFT_USERNAME: opentlc-mgr 
        OPENSHIFT_NAMESPACE: argo-cd
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }} # If you wanted a different cluster use a different URL here
        openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }} # same as above. use Prod password or token
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        openshift_username: ${{ env.OPENSHIFT_USERNAME }}

    - name: Deploy Namespace and Argo app deployment yaml to OpenShift cluster
      if: ${{ github.event.client_payload.slash_command.namespace == 'ci' }}
      run: |
        helm template ./charts/bootstrap | oc apply -f -

    - name: Deploy Namespace and Argo app deployment yaml to OpenShift cluster
      if: ${{ github.event.client_payload.slash_command.namespace != 'ci' }}
      run: |
        helm template ./charts/bootstrap -f ./charts/bootstrap/values-$NEW_ENV.yaml | oc apply -f -

    - name: Create comment
      uses: peter-evans/create-or-update-comment@v1
      if: ${{ github.event.client_payload.slash_command.cluster != null }}
      with:
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        issue-number: "${{ steps.env_info.outputs.issuenm }}"
        body: |
          Deployed ${{ steps.env_info.outputs.issuetitle }} to ${{ env.NEW_ENV }} on ${{ github.event.client_payload.slash_command.cluster }}! üèéÔ∏è

          | Command | Description | Parameters |
          |---|---|---|
          | `/deploy` | Deploys the promotion to k8s cluster based on Issue Title | `cluster=<ci or prod>`</br>optional: `namespace=<namespace>` note: this is also the name of the `charts/my-app/values-*.yaml` file that will be used |
          | `/promote` | Promotes with new Quay tag (e.g. demo), updates label ('promoted to demo'), and updates references on branch | N/A |
          | `/cancel` | Cancels the current release (closes this issue) | N/A |

    - name: Create comment (no cluster set)
      uses: peter-evans/create-or-update-comment@v1
      if: ${{ github.event.client_payload.slash_command.cluster == null }}
      with:
        repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
        issue-number: "${{ steps.env_info.outputs.issuenm }}"
        body: |
          Didn't Deploy! Please set a cluster!
